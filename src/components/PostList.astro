---
import {
  Date as DateIcon,
  FolderOpen,
  Computer3,
  FileText,
  Brush,
  Code,
  Defrag,
} from '@react95/icons';
import type { BlogPost } from '../types/index';
import { Button, Frame, TitleBar, contract } from '@react95/core';

export interface Props {
  posts: BlogPost[];
}

const { posts } = Astro.props;

const formatDate = (date: Date) => {
  return new Date(date).toLocaleString('en-US', {
    month: 'long',
    year: 'numeric',
  });
};

const getCategoryIcon = (category: string) => {
  const lowerCategory = category.toLowerCase();
  if (lowerCategory.includes('design')) return 'design';
  if (
    lowerCategory.includes('tech') ||
    lowerCategory.includes('programming') ||
    lowerCategory.includes('javascript') ||
    lowerCategory.includes('arquitetura')
  )
    return 'tech';
  if (lowerCategory.includes('system')) return 'system';
  return 'default';
};

const textColor = contract.colors.materialTextInvert;
---

<ul class="content">
  {
    posts.map((post) => {
      if (!post) return null;
      const categoryType = getCategoryIcon(post.category);

      return (
        <Frame as="li" p="$4" boxShadow="$out" className="post">
          <TitleBar title={post.title} className="title" />
          <Frame bgColor="white" boxShadow="$in" p="$8">
            <p class="description">{post.description}</p>
            <div class="meta-container">
              <p class="meta">
                <DateIcon variant="16x16_4" className="date-icon" client:only />
                <span class="date">{formatDate(post.date)}</span>
              </p>
              <p class="meta category-meta">
                {categoryType === 'design' && (
                  <Defrag
                    variant="16x16_4"
                    className="category-icon"
                    client:only
                  />
                )}
                {categoryType === 'tech' && (
                  <Computer3
                    variant="16x16_4"
                    className="category-icon"
                    client:only
                  />
                )}
                {categoryType === 'system' && (
                  <FolderOpen
                    variant="16x16_4"
                    className="category-icon"
                    client:only
                  />
                )}
                {categoryType === 'default' && (
                  <FileText
                    variant="16x16_4"
                    className="category-icon"
                    client:only
                  />
                )}
                <span class="category">{post.category.toUpperCase()}</span>
              </p>
            </div>
            <Button
              as="a"
              href={`/post${post.slug}`}
              target="_blank"
              className="read-link"
              client:only
            >
              Read
            </Button>
          </Frame>
        </Frame>
      );
    })
  }
</ul>

<style define:vars={{ textColor }}>
  .content {
    list-style: none;
    padding: 0;
    margin: 0;
    padding-left: 2rem;
  }

  .post {
    margin-bottom: 2rem;
  }

  .post-link {
    color: unset;
  }

  .meta-container {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .meta {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    color: rgb(var(--gray-dark));
    margin-bottom: 0.5rem;
  }

  .category-meta {
    display: flex;
    align-items: center;
    gap: 0.25rem;
  }

  .date-icon,
  .category-icon {
    flex-shrink: 0;
  }

  .meta .date {
    font-weight: bold;
  }

  .meta .category {
    color: var(--accent);
    text-transform: uppercase;
    font-weight: bold;
  }

  .title {
    font-size: 1.25rem;
    height: 2rem;
    text-decoration: none;
  }

  .title:hover {
    text-decoration: underline;
    text-decoration-color: var(--textColor);
    text-underline-offset: 0.25rem;
  }

  .description {
    font-size: 1rem;
    color: rgb(var(--text-light));
    margin: 0.5rem 0;
  }

  .read-link {
    text-decoration: none;
  }

  .read-link:hover {
    color: var(--accent);
  }

  @media (max-width: 768px) {
    .content {
      padding-left: 0;
    }

    .post {
      margin-bottom: 2.5rem;
    }
  }
</style>
