<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Blog do GG - RSS Feed]]></title><description><![CDATA[O que fiz, o que faço e o que vou fazer]]></description><link>https://ggdaltoso.dev</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 08 May 2024 01:19:01 GMT</lastBuildDate><item><title><![CDATA[Monolito, Multirepo ou Monorepo?]]></title><description><![CDATA[Monolito é fácil para começar um projeto. Multirepo pode ser bom quando o problema é espaço. Monorepo tem vários projetos que compartilham o mesmo repositório. Qual deles é bom pra mim?]]></description><link>https://ggdaltoso.dev/posts/monolito-multirepo-ou-monorepo/</link><guid isPermaLink="false">https://ggdaltoso.dev/posts/monolito-multirepo-ou-monorepo/</guid><pubDate>Fri, 10 Jul 2020 03:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Muitos projetos adotam o modelo de monorepo para estruturar seu repositório.
Grandes nomes como &lt;a href=&quot;https://github.com/angular/angular&quot;&gt;Angular&lt;/a&gt;,
&lt;a href=&quot;https://github.com/babel/babel&quot;&gt;Babel&lt;/a&gt; e
&lt;a href=&quot;https://github.com/facebook/react&quot;&gt;React&lt;/a&gt;, por exemplo, utilizam essa
estratégia. Por outro lado, a Uber passou de &lt;a href=&quot;https://www.youtube.com/watch?v=lV8-1S28ycM&quot;&gt;Monorepo para Multirepo&lt;/a&gt; e o &lt;a href=&quot;https://github.com/microsoft/vscode&quot;&gt;VSCode&lt;/a&gt; continua sendo
um monolito. Qual será a melhor para o meu projeto?&lt;/p&gt;
&lt;p&gt;Antes de começar a discutir o quão bom ou ruim é uma estrutura de repositório,
acho importante falar um pouco de cada uma delas.&lt;/p&gt;
&lt;h3&gt;Monolito&lt;/h3&gt;
&lt;span class=&quot;figure float-left&quot;&gt;
  &lt;img
    src=&quot;/media/monorepo/monolith.png&quot;
    width=&quot;180&quot;
    alt=&quot;Diagrama de um monolito&quot;
    title=&quot;Monolito.png&quot;
  /&gt;
&lt;/span&gt;
&lt;p&gt;Esse modelo consiste em ter tudo em um único lugar. Tudo junto e misturado.
Geralmente é a mais comum entre os projetos antigos (famoso legado) pois era a
forma mais fácil de se começar e continuar um projeto, já que não haviam
ferramentas suficientes para se fazer o manuseio de multiplos módulos em um
mesmo repositório. Resumidamente: &lt;strong&gt;1 repositório e 1 projeto&lt;/strong&gt;.&lt;/p&gt;
&lt;br class=&quot;hide-sm&quot;/&gt;
&lt;br  class=&quot;hide-sm&quot;/&gt;
&lt;h3&gt;Multirepo ou Polirepo&lt;/h3&gt;
&lt;span class=&quot;figure float-right&quot;&gt;
  &lt;img
    src=&quot;/media/monorepo/multirepo.png&quot;
    alt=&quot;Diagrama de um multirepo ou Polirepo&quot;
    width=&quot;160&quot;
    title=&quot;Multirepo.png&quot;
  /&gt;
&lt;/span&gt;
&lt;p&gt;Em um cenário onde um projeto possa ser subdivido em múltiplos módulos (ou em
vários projetos), podemos atribuir para cada um deles, seu próprio repositório,
ou seja, &lt;strong&gt;N repositórios para N projetos&lt;/strong&gt;.&lt;/p&gt;
&lt;br class=&quot;hide-sm&quot;/&gt;
&lt;br class=&quot;hide-sm&quot;/&gt;
&lt;h3&gt;Monorepo&lt;/h3&gt;
&lt;span class=&quot;figure float-left&quot;&gt;
  &lt;img
    src=&quot;/media/monorepo/monorepo.png&quot;
    alt=&quot;Diagrama de um monorepo&quot;
    width=&quot;160&quot;
    title=&quot;Monorepo.png&quot;
  /&gt;
&lt;/span&gt;
&lt;p&gt;Por fim, quando temos vários projetos que compartilham do mesmo repositório,
damos o nome a essa estrutura de Monorepo que, em minha opinião, é uma extensão
do Monolito, lidando com &lt;strong&gt;1 repositório para N projetos&lt;/strong&gt;.&lt;/p&gt;
&lt;br class=&quot;hide-sm&quot; /&gt;
&lt;p&gt;Qual dessas estruturas eu devo colocar em meu projeto? Bom, depende...&lt;/p&gt;
&lt;h2&gt;Minha lista de receitas&lt;/h2&gt;
&lt;span class=&quot;figure float-left&quot;&gt;
  &lt;img
    src=&quot;/media/monorepo/simple-structure.png&quot;
    alt=&quot;Estrutura simples do projeto inicial&quot;
    width=&quot;250&quot;
    title=&quot;Minha lista de Receitas.png&quot;
  /&gt;
&lt;/span&gt;
&lt;p&gt;Um projeto é tudo aquilo que tem começo, meio e fim e aqui ele vai ser
considerado como algo que possa ser versionado também, para fins ilustrativos.
Para exemplificar mais um pouco, vamos criar um projeto fictício para poder
acompanhar a gente durante o raciocínio.
Consideraremos também que esse é um projeto pessoal que vai sendo desenvolvido
conforme as que necessidades vão aparecendo. Nosso projeto se chamará &lt;em&gt;Minha
lista de Receitas&lt;/em&gt;.&lt;/p&gt;
&lt;br class=&quot;hide-sm&quot; /&gt;
&lt;p&gt;O mais importante aqui é começar. Apenas com a ideia na cabeça, o mais comum de
se fazer é criar o repositório vazio seguido por um visual simples.&lt;/p&gt;
&lt;p&gt;Dessa forma teremos um projeto para um repositório, caracterizando-o como
Monolito. No meu ponto de vista, essa é a estrutura mais simples que esse
repositório pode ter e a mais fácil também.&lt;/p&gt;
&lt;p&gt;O desenvolvimento vai se saindo muito bem e você fica muito orgulhoso de como
ele está ficando bonito. Chega um ponto em que você percebe que seria bom
se conseguisse usar seus estilos em um outro projeto, como um pacote separado.
Ou seja, você precisa quebrar seu projeto principal em 2 projetos: 1 para o
&lt;em&gt;Minha lista de Receitas&lt;/em&gt; e 1 para os estilos, que vou chamar de
&lt;em&gt;Receitas.Styles&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A partir desse momento a estrutura de Monolito já não comporta nossas
necessidades mais (N projetos). Precisamos escolher entre Multirepo e Monorepo.&lt;/p&gt;
&lt;h2&gt;A escolha&lt;/h2&gt;
&lt;p&gt;Para o &lt;em&gt;Minha lista de Receitas&lt;/em&gt; ou para o que você esteja fazendo, a escolha do
que implementar pode variar conforme vários fatores. Pela minha própria
experiência, vou listar alguns para ajudar a gente escolher qual estrutura seria
a melhor.&lt;/p&gt;
&lt;h4&gt;Dependências&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Monorepo: Tudo que envolva seu projeto e subprojetos será instalado,
&lt;a href=&quot;https://classic.yarnpkg.com/en/docs/workspaces&quot;&gt;compartilhando aquilo que tiver em comum&lt;/a&gt;.
No nosso exemplo, se você precisar fazer apenas uma alteração nos estilos,
você precisará instalar as dependências tanto do &lt;em&gt;Minha lista de Receitas&lt;/em&gt;
quanto do &lt;em&gt;Receitas.Styles&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Multirepo: Cada repositório tem suas dependências e, mesmo que sejam as
mesmas, ficarão duplicadas em sua máquina. Se seus projetos forem do NPM, por
exemplo, você terá que usar &lt;a href=&quot;https://docs.npmjs.com/cli/link&quot;&gt;&lt;code&gt;npm link&lt;/code&gt;&lt;/a&gt; para
fazer com que eles se comuniquem enquanto desenvolve. Se você pesquisar um
pouco sobre isso ou mesmo tentar usar, vai ver que não é tão mágico quanto
dizem e nem sempre funcionam com outras bibliotecas por aí.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;em&gt;Issues&lt;/em&gt; e &lt;em&gt;Pull Requests&lt;/em&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Monorepo: Todas as &lt;em&gt;issues&lt;/em&gt; e &lt;em&gt;pull requests&lt;/em&gt; estarão em um único lugar
(repositório) e você vai ter que pensar em
&lt;a href=&quot;https://github.com/actions/labeler&quot;&gt;uma forma&lt;/a&gt; de agrupá-las ou
diferenciá-las se não quiser ficar tudo misturado e jogado.&lt;/li&gt;
&lt;li&gt;Multirepo: Sempre que quiser responder uma &lt;em&gt;issue&lt;/em&gt; ou mergear um &lt;em&gt;pull
request&lt;/em&gt;, você vai ter que trocar de contexto, instalar tudo de novo, linkar
os projetos pra testar e por aí vai.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Eu colocaria &lt;a href=&quot;https://en.wikipedia.org/wiki/CI/CD&quot;&gt;&lt;em&gt;CI/CD&lt;/em&gt;&lt;/a&gt; como um outro fator
importante nessa escolha mas tem um ponto a ser considerado antes. Tanto em
Multirepos quanto em Monorepos eu nunca tive problemas em manusear os processos
de publicação e/ou &lt;em&gt;deploy&lt;/em&gt;. O mais importante é saber as etapas de cada projeto
para que seu repositório fique bem.&lt;/p&gt;
&lt;p&gt;Dado esses pontos, qual estrutura é a melhor para o projeto &lt;em&gt;Minha lista de
Receitas&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;Eu, particularmente, escolheria Monorepo por já ter trabalhado com algo similar
e, inclusive, implementei a transição de um
&lt;a href=&quot;https://github.com/React95/React95/pull/117&quot;&gt;Monolito para um Monorepo&lt;/a&gt;, no
React95.&lt;/p&gt;
&lt;p&gt;Qual você escolheria?&lt;/p&gt;</content:encoded></item><item><title><![CDATA[React95: fun side project of the year]]></title><description><![CDATA[React95 é uma biblioteca de componentes escrita em React usando  styled-components. Em abril de 2019, ganhou o prêmio de “Fun side project of  the year” na maior conferência de React do mundo, em Amsterdã.]]></description><link>https://ggdaltoso.dev/posts/react95-fun-side-project-of-the-year/</link><guid isPermaLink="false">https://ggdaltoso.dev/posts/react95-fun-side-project-of-the-year/</guid><pubDate>Fri, 17 May 2019 10:46:37 GMT</pubDate><content:encoded>&lt;p&gt;Já faz um tempo que deveria ter escrito essa história mas como a ficha está
caindo só agora, vou contar pra vocês como foi ter ganhado o prêmio de Fun
Project of the Year, na maior conferência de React, em Amsterdã, por causa do
React95.&lt;/p&gt;
&lt;h3&gt;Quem são os envolvidos&lt;/h3&gt;
&lt;p&gt;Entrei na Catho em novembro de 2017, no time de plataforma Front End. Desde o
meu primeiro dia, ouvia nos corredores da empresa muitos comentários dizendo que
haviam muitos “problemas” relacionados a layout no site principal da Catho e em
todos os seus produtos. Dentre as mais variadas reclamações que ouvi as que mais
me chamaram a atenção foram essas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Não havia um padrão definido sobre como os elementos visuais deveriam ser e
muito menos como deveriam se comunicar.&lt;/li&gt;
&lt;li&gt;Não existia um lugar onde as pessoas poderiam procurar por esses padrões.
Foi aí que nosso time teve a brilhante ideia de fazer um design system. Ótimo!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Assim que tivemos esse insight, nos deparamos que junto com uma solução, vinha
um problema.&lt;/p&gt;
&lt;p&gt;&lt;img 
src=&quot;/media/react95-fun-side-project-of-the-year/React95-o-que-queremos.jpeg&quot; 
alt=&quot;Time de plataforma definindo o que iremos fazer&quot; 
title=&quot;Time.png&quot;
/&gt;&lt;/p&gt;
&lt;p&gt;No começo só sabíamos o que era um design system porque ouvimos falar por aí.
Nunca implementamos um.&lt;/p&gt;
&lt;p&gt;Assim que decidimos fazer um, começamos a estudar como desenvolver uma
biblioteca de componentes em React que, pelo menos esse, já estava definido como
padrão de projetos.&lt;/p&gt;
&lt;p&gt;Como implementar um design system!? Como fazer uma biblioteca de componentes?
Como automatizar &lt;em&gt;build&lt;/em&gt; e &lt;em&gt;deploy&lt;/em&gt;? NPM? &lt;em&gt;TreeShaking&lt;/em&gt;!?&lt;/p&gt;
&lt;p&gt;Essas dúvidas foram tomando conta da gente no dia-a-dia do trabalho. As
discussões eram tão grandes e calorosas que não tínhamos como ir pra casa sem
pensar nisso.&lt;/p&gt;
&lt;p&gt;Foi aí que decidi fazer um projeto pessoal pra poder aprender sobre tudo o que
discutíamos e quem me acompanhou nessa foi o
&lt;a href=&quot;https://allysson.me/&quot;&gt;Allysson dos Santos&lt;/a&gt;, que trabalha comigo na Catho.&lt;/p&gt;
&lt;p&gt;Daí eu pensei: já que gostaria de fazer um projeto pessoal, que é uma biblioteca
de componentes, preciso que ela me incentive a desenvolver em casa, já que
existem várias outras formas de lazer e que devem ser aproveitadas, e por que
não fazer os componentes do Windows95?&lt;/p&gt;
&lt;p&gt;E assim nasce o &lt;strong&gt;React95&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img 
src=&quot;/media/react95-fun-side-project-of-the-year/React95-v1.0.0.jpeg&quot; 
alt=&quot;Primeira versão do React95&quot; 
title=&quot;React95-v1.0.0.png&quot;
/&gt;&lt;/p&gt;
&lt;p&gt;Em paralelo, todo o conhecimento aprendido foi utilizado para desenvolver o
&lt;a href=&quot;https://github.com/catho/quantum&quot;&gt;Quantum&lt;/a&gt;, a biblioteca de componentes da
Catho, que nosso time vem dedicando muitos esforços para ficar bom não somente
para os desenvolvedores mas também para o time de UX/UI.&lt;/p&gt;
&lt;h3&gt;Famoso&lt;/h3&gt;
&lt;p&gt;Quanto mais desenvolvia componentes no React95, mais animado eu ficava. Perdia
horas e horas vendo fotos antigas e conversando com amigos sobre como era
Windows95, quais eram as telas de que mais se lembravam, etc.&lt;/p&gt;
&lt;p&gt;Nessa de ficar conversando, o React95 foi começando a se espalhar pela
comunidade e a ganhar estrelas no Github. Lembro até hoje que ficava apertando
F5 na página do repositório na esperança de ver +1 ⭐️ (e aqui estou falando de
7 pra 8 estrelas).&lt;/p&gt;
&lt;p&gt;Commit que vem, commit que vai, pull request que se abre e outros que se fecham.
De repente apareceu a
&lt;a href=&quot;https://github.com/React95/React95/pull/69&quot;&gt;primeira contribuição de fora&lt;/a&gt;. Eu
não sabia o que fazer de tão feliz que fiquei! E ainda resolvia algo que
havíamos criado como &lt;em&gt;&lt;a href=&quot;https://github.com/React95/React95/pull/69&quot;&gt;issue&lt;/a&gt;&lt;/em&gt;, já
que mantínhamos nosso roadmap dessa forma desde o começo do projeto.&lt;/p&gt;
&lt;p&gt;Tudo estava muito legal. Meus amigos discutindo, vendo as alterações,
contribuindo com ideias e código. Parecia mesmo um desses projetos que se vê no
github, sabe?&lt;/p&gt;
&lt;h3&gt;A nomeação&lt;/h3&gt;
&lt;p&gt;Ficava monitorando o repositório, como falei ali em cima, pra ver os números de
estrelas que tinha nele. Eu vi passar de 0 pra 10. De 10 pra 30 e chegar a 100.
Quando o repositório atingiu essa marca de estrelas, desacreditei. Não imaginava
que podia fazer “tanto sucesso”. Junto com os três dígitos, coincidentemente,
recebi um email do &lt;a href=&quot;https://twitter.com/operatino&quot;&gt;Robert Haritonov&lt;/a&gt; que dizia o
seguinte:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey Gabriel,&lt;/p&gt;
&lt;p&gt;React ecosystem success is entirely built on top of it’s open source community
and all the enthusiastic developers contributing with their code, ideas, and
projects. To give an extra credit to hard working open source developers,
together with React Amsterdam Conference, we continue running our annual Open
Source Awards ceremony — &lt;a href=&quot;https://osawards.com/react&quot;&gt;https://osawards.com/react&lt;/a&gt; (think Oscars, but for OS).&lt;/p&gt;
&lt;p&gt;With open submission form on OS Awards website and our programme committee,
including active React open source contributors, we’ve came up with 5 award
groups, and up to 4 selected nominees per each group, where your project
“React95” is nominated for “Fun side project of the year”.&lt;/p&gt;
&lt;p&gt;Before announcing the nominees, …&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Eu tava lendo de boa e parei quando li &lt;strong&gt;“React95” is nominated for “Fun side
project of the year”&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-resp-iframe-wrapper&quot; style=&quot;padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; margin-bottom: 1.0725rem&quot; &gt; &lt;iframe src=&quot;https://www.youtube.com/embed/U6MlaIe1ljs&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot; style=&quot; position: absolute; top: 0; left: 0; width: 100%; height: 100%; &quot;&gt;&lt;/iframe&gt; &lt;/div&gt;
&lt;p&gt;Li várias vezes. Lia e relia. Nem dormi direito naquele dia. E sabe o que mais
me impressionou nisso?&lt;/p&gt;
&lt;p&gt;EU NÃO SEI ATÉ HOJE QUEM FOI QUE INSCREVEU O REACT95 NESSA CONFERÊNCIA!&lt;/p&gt;
&lt;p&gt;Que poder tem a comunidade!&lt;/p&gt;
&lt;p&gt;Tive que parar por um momento para entender o que estava acontecendo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;React95 foi nomeado como finalista em uma das categorias do que seria o Oscar
do Open Source.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Beleza.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A premiação será realizada em uma conferência em Amsterdã, daqui a 1 mês.
Como eu vou pra lá!? Pensei eu.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;A viagem&lt;/h3&gt;
&lt;p&gt;Quando eu recebi o e-mail do Robert, fiquei muito animado. Mostrei o e-mail para
minha esposa e pro pessoal do meu trabalho.&lt;/p&gt;
&lt;p&gt;Minha esposa me motivou muito e disse que eu tinha que ir, a gente daria um
jeito. Enquanto isso, no trabalho, o pessoal ficou mais animado que eu! Lembro
de ter ouvido falarem em fazer uma vaquinha pra custear tudo.&lt;/p&gt;
&lt;p&gt;Foi aí que a Catho entrou em cena:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Vocês vão. Pagaremos tudo para vocês.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/vSqkwpFA4ZwAM/giphy.gif&quot; alt=&quot;Animação mostrando minha reação&quot; title=&quot;WTF.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;Eu fiquei muito surpreso porque o React95, diretamente, não tinha nada a ver com
a Catho. Era um projeto pessoal. A empresa não tinha que fazer isso mas mesmo
assim o fez e, inclusive, disse para a gente trabalhar de lá, já que a empresa
possui o trabalho remoto como benefício. Ficamos impressionados e fomos.&lt;/p&gt;
&lt;h3&gt;O prêmio&lt;/h3&gt;
&lt;p&gt;Chegamos lá em Amsterdã e a conf estava top! Tinha todo mundo que a gente só vê
no twitter, sabe? &lt;a href=&quot;https://twitter.com/peggyrayzis&quot;&gt;Peggy Rayzis&lt;/a&gt;,
&lt;a href=&quot;https://twitter.com/kentcdodds&quot;&gt;Kent C. Dodds&lt;/a&gt; e tive o prazer de conhecer o
&lt;a href=&quot;https://twitter.com/markdalgleish&quot;&gt;Mark Dalgleish&lt;/a&gt;, funcionário da Seek, “dona”
da Catho e um dos resposáveis pelo
&lt;a href=&quot;https://github.com/seek-oss/braid-design-system&quot;&gt;Braid&lt;/a&gt;: o design system usado
em várias empresas do grupo Seek.&lt;/p&gt;
&lt;p&gt;Quando foi chegando mais pro meio do dia, começou a cerimônia &lt;em&gt;Open Source
Awards&lt;/em&gt;, cuja a qual o React95 estava nomeado como finalista em uma das 5
categorias.&lt;/p&gt;
&lt;p&gt;A categoria que estávamos esperando era a “&lt;em&gt;Fun side project of the year&lt;/em&gt;” e a
terceira a ser apresentada. Estávamos apreensivos, sentados em uma das primeiras
fileiras e vimos o seguinte a ser projetado no fundo:&lt;/p&gt;
&lt;p&gt;&lt;img
src=&quot;/media/react95-fun-side-project-of-the-year/React95-winner-announcement.jpeg&quot;
alt=&quot;React95 é o ganhador do prêmio “Fun side project of the Year”&quot;
title=&quot;Fun side project of the Year.png&quot;
/&gt;&lt;/p&gt;
&lt;p&gt;GANHAMOS O PRÊMIO. SÉRIO. E, claro, fomos chamados lá em cima pra recebê-lo.&lt;/p&gt;
&lt;p&gt;Esse, até hoje e com certeza, foi o ápice da minha vida profissional.&lt;/p&gt;
&lt;p&gt;Tudo o que estava acontecendo era difícil de acreditar, não pelo troféu em si,
mas o que aconteceu pra chegar até ali.&lt;/p&gt;
&lt;p&gt;&lt;img
src=&quot;/media/react95-fun-side-project-of-the-year/React95-winner-trophy.jpeg&quot;
alt=&quot;Muitas emoções na entrega do prêmio&quot;
title=&quot;Fun Side Project of the Year.png&quot;
/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;O React95 não ganhou o prêmio porquê ele é um bom projeto ou um projeto
engraçado. Ele ganhou por causa da comunidade.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;E é isso que me motiva a continuar fazendo o que eu faço. Amo ser desenvolvedor
e pretendo continuar por muito tempo ainda.&lt;/p&gt;
&lt;p&gt;Espero que minha experiência sirva de motivação para todo mundo!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Hoisting. Quê?]]></title><description><![CDATA[O que é hoisting?]]></description><link>https://ggdaltoso.dev/posts/hoisting-que/</link><guid isPermaLink="false">https://ggdaltoso.dev/posts/hoisting-que/</guid><pubDate>Thu, 03 Aug 2017 00:35:06 GMT</pubDate><content:encoded>&lt;p&gt;&quot;Quê?&quot; mesmo. Eu falei exatamente isso na primeira vez que ouvi essa palavra:
Housing? Routing? Ahn? Quê?&lt;/p&gt;
&lt;p&gt;Esses dias me deparei com esse tweet:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;
  &lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;
    Javascript simple quiz. 
    &lt;br /&gt;&lt;br /&gt;
    What&amp;#39;s the output? And why? 
    &lt;br /&gt;&lt;br /&gt;
    No cheating 😂 👀 
    &lt;a href=&quot;https://t.co/Vqacfzhh4n&quot;&gt;pic.twitter.com/Vqacfzhh4n&lt;/a&gt;
  &lt;/p&gt;&amp;mdash; 
  Rowland I. Ekemezie (@rowlandekemezie) 
  &lt;a href=&quot;https://twitter.com/rowlandekemezie/status/884752434953945088?ref_src=twsrc%5Etfw&quot;&gt;
    July 11, 2017
  &lt;/a&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ele é justamente o tema do post. Quando perguntei para algumas pessoas se elas
sabiam o que era isso ou se já ouviram falar, a resposta não foi única e então
resolvi comentar um pouco desse assunto.&lt;/p&gt;
&lt;p&gt;Segundo o &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Hoisting&quot;&gt;MDN&lt;/a&gt; a
definição de &lt;em&gt;hoisting&lt;/em&gt; é:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Em JavaScript, funções e variáveis são &lt;strong&gt;hoisted&lt;/strong&gt; (ou &quot;levados ao topo&quot;).
Hoisting é um comportamento do JavaScript de mover declarações para o topo de um
escopo (o escopo global ou da função em que se encontra).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Quê?&lt;/p&gt;
&lt;p&gt;Isso quer dizer que não importa onde suas funções e variáveis são declaradas,
elas serão movidas para o topo independentemente se seu escopo for local ou
global. Reforçando que somente a declaração é movida; a atribuição fica no mesmo
lugar.&lt;/p&gt;
&lt;p&gt;E isso é o que possibilita a chamada de uma função antes de sua implementação!&lt;/p&gt;
&lt;h2&gt;undefined vs ReferenceError&lt;/h2&gt;
&lt;p&gt;Antes de sair codando exemplos, vamos partir pelo começo.&lt;/p&gt;
&lt;p&gt;Quando imprimimos uma variável (foo) que não foi declarada, o resultado é esse:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(typeof foo); // undefined
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O que nos leva a um ponto interessante:
Em JavaScript, uma variável que não foi declarada recebe, em tempo de execução,
o valor &lt;code&gt;undefined&lt;/code&gt; e seu tipo também é &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;E um outro ponto é quando tentamos acessar uma variável que não foi declarada:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(foo); // ReferenceError: variable is not defined
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O comportamento do JavaScript no controle e manipulação de variáveis se torna
diferenciado por causa do &lt;em&gt;hoisting&lt;/em&gt;, que veremos a seguir.&lt;/p&gt;
&lt;h2&gt;Variáveis&lt;/h2&gt;
&lt;p&gt;A forma com que as variáveis são declaradas e inicializadas em JavaScript,
acontece da seguinte maneira:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var foo; // Declaração

foo = 42; // Inicialização/Atribuição

foo + 42; // Uso
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Entretando, podemos declarar e inicializar variáveis simultaneamente, como vemos
normalmente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var foo = 42;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O importante é destacar que o JavaScript fará a &lt;strong&gt;declaração&lt;/strong&gt; e a
&lt;strong&gt;inicialização&lt;/strong&gt; das variáveis.&lt;/p&gt;
&lt;p&gt;Mas, como falei ali em cima, todas as funções e variáveis são movidas para cima
do escopo, tendo suas declarações feitas antes de qualquer trecho de código ser
executado.&lt;/p&gt;
&lt;p&gt;Existem casos em que variáveis não declaradas recebem valores sendo então
declaradas somente no momento da execução do código. Essas variáveis são criadas
implicitamente como variáveis globais, o que nos leva a concluir que &lt;em&gt;variáveis
não declaradas são sempre globais&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Esse trecho de código vai ajudar a esclarecer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function global() {
  foo = 42;
  var bar = 142;
}

global();

// Quando invocamos a função global, ela cria a variável foo no escopo global
// e, portanto, conseguimos acessá-la de fora
console.log(foo); // 42

// De maneira oposta, se tentarmos acessar a outra variável, não conseguiremos
console.log(bar); // RefereceError: b is not defined
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;var&lt;/h2&gt;
&lt;p&gt;Em ES5, uma variável declarada com &lt;code&gt;var&lt;/code&gt; possui seu escopo como o atual
contexto, que pode ser dentro ou fora de uma função (global).&lt;/p&gt;
&lt;h3&gt;Variáveis globais&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(foo); // undefined

var foo = &quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit.&quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Quê!?&lt;/p&gt;
&lt;p&gt;O resultado do log era para ser &lt;code&gt;ReferenceError: foo is not defined&lt;/code&gt;, mas ao
invés disso, temos &lt;code&gt;undefined&lt;/code&gt;!?&lt;/p&gt;
&lt;p&gt;O que aconteceu foi exatamente o que estamos falando: O JavaScript jogou a
declaração para o topo. Na real, o que aconteceu foi o seguinte:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var foo;

console.log(foo); // undefined
foo = &quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit.&quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Por causa desse comportamento é que podemos usar as variáveis antes mesmo de
tê-las declarado, só precisamos ter cuidado porque toda variável declarada dessa
forma é inicializada com &lt;code&gt;undefined&lt;/code&gt;. A melhor maneira seria declarar e
inicializar antes de usar.&lt;/p&gt;
&lt;h3&gt;Variáveis dentro de uma função&lt;/h3&gt;
&lt;p&gt;Aqui a coisa acontece de forma parecida, só muda o contexto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function foo() {
  console.log(bar);
  var bar = &quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit.&quot;;
}

foo();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Não coloquei a saída ali porque gostaria que pensasse um pouquinho.&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;Se pensou em &lt;code&gt;undefined&lt;/code&gt; mandou bem! Caso contrário, essa é a forma com que o
código foi interpretado:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function foo() {
  var bar;
  console.log(bar);
  bar = &quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit.&quot;;
}

foo();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nesse caso, note que o escopo é outro (&lt;code&gt;function&lt;/code&gt;) e nos indica que o topo de
onde a declaração é feita não é mais o global.&lt;/p&gt;
&lt;p&gt;Um conselho pessoal é: evite esse tipo de armadilha. Dê preferência, sempre, em
declarar e inicializar uma variável antes de utilizá-la.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function foo() {
  var bar = &quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit.&quot;;
  console.log(bar);
}

foo(); // Lorem ipsum dolor sit amet, consectetur adipiscing elit.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Strict Mode&lt;/h3&gt;
&lt;p&gt;Em ES5 temos uma utilidade chamada &lt;em&gt;strict-mode&lt;/em&gt;, da qual eu provavelmente vá
escrever um outro post, que nos dá um pouco mais de controle em como as
variáveis são declaradas.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&quot;use strict&quot;;

// ou
&quot;use strict&quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O que isso faz, resumidamente, é não deixar que variáveis sejam utilizadas antes
de sua declaração.&lt;/p&gt;
&lt;p&gt;Agora, se executarmos um dos testes anteriores em &lt;em&gt;sctrict-mode&lt;/em&gt;, temos o
seguinte resultado:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&quot;use strict&quot;;
console.log(foo); // ReferenceError: foo is not defined

var foo = &quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit.&quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Interessante, né?&lt;/p&gt;
&lt;h2&gt;ES6&lt;/h2&gt;
&lt;p&gt;Aí me aparece um tal de &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_2015_support_in_Mozilla&quot;&gt;ECMAScript 6&lt;/a&gt;, conhecido como ES6, com
algumas coisas novas para o ES5.&lt;/p&gt;
&lt;p&gt;Algumas delas envolvem declaração e inicialização de variáveis.&lt;/p&gt;
&lt;h3&gt;let&lt;/h3&gt;
&lt;p&gt;Vamos começar pela keyword &lt;code&gt;let&lt;/code&gt;. Todas as variáveis que sejam declaradas dessa
forma, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let&quot;&gt;são variáveis locais no escopo do bloco atual&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(foo); // ReferenceError: foo is not defined
let foo = &quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit.&quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Quê?&lt;/p&gt;
&lt;p&gt;Assim como a keyword &lt;code&gt;var&lt;/code&gt;, o esperado é que o log fosse &lt;code&gt;undefined&lt;/code&gt;.
Entretando, o &lt;code&gt;let&lt;/code&gt; não nos deixa usar variáveis não declaradas, o que explica o &lt;code&gt;ReferenceError&lt;/code&gt;. Hm...&lt;/p&gt;
&lt;p&gt;Ainda assim, temos que tomar cuidado pois uma implementação como essa:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let foo;

console.log(foo); // undefined
foo = &quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit.&quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;nos dará &lt;code&gt;undefined&lt;/code&gt; ao invés de &lt;code&gt;ReferenceError&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Só para não esquecer: declare e atribua valores às variáveis antes de usá-las.&lt;/p&gt;
&lt;h3&gt;const&lt;/h3&gt;
&lt;p&gt;A keyword &lt;code&gt;const&lt;/code&gt; apareceu com o intuito de fazer com que a variável
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const&quot;&gt;seja uma constante e imutável&lt;/a&gt;,
sem a possibilidade de ter seu valor alterado:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const PI = 3.14;

PI = 22 / 7; // TypeError: Assignment to constant variable.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Em nosso caso:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(PI); // ReferenceError: PI is not defined
const PI = 3.14;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Da mesma forma que no &lt;code&gt;let&lt;/code&gt;, temos &lt;code&gt;ReferenceError&lt;/code&gt; e isso também acontece se
usarmos uma variável &lt;code&gt;const&lt;/code&gt; dentro de funções:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function getArea(raio) {
  console.log(area);
  area = PI * raio * raio;
  const PI = 3.14;
}

getArea(5); // ReferenceError: area is not defined.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se você utilizar uma ferramenta para verificar seu código, como
&lt;a href=&quot;http://jshint.com/&quot;&gt;jshint&lt;/a&gt; por exemplo, ele dá esse aviso:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&apos;PI&apos; was used before it was declared, which is illegal for &apos;const&apos; variables.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Se tentarmos só declarar uma variável com &lt;code&gt;const&lt;/code&gt; já &quot;dá ruim&quot;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const PI; // SyntaxError: Missing initializer in const declaration
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Resumindo:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Uma variável &lt;code&gt;const&lt;/code&gt; precisa, necessariamente, ser declarada e inicializada
antes de ser utilizada.&lt;/li&gt;
&lt;li&gt;Variáveis declaradas com &lt;code&gt;let&lt;/code&gt; e &lt;code&gt;const&lt;/code&gt; não são &lt;strong&gt;inicializadas&lt;/strong&gt; no começo
da execução, ao contrário de &lt;code&gt;var&lt;/code&gt; que tem seu valor inicializado como &lt;strong&gt;undefined&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Functions&lt;/h2&gt;
&lt;p&gt;Funções em JavaScript podem ser classificadas como sendo &lt;strong&gt;declaradas&lt;/strong&gt; ou
&lt;strong&gt;expressas&lt;/strong&gt; e em ambos os tipos existe &lt;em&gt;hoisting&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Declaradas&lt;/h3&gt;
&lt;p&gt;Lembra lá de cima onde falei que funções e variáveis são jogadas para o topo?
Pois é. Esse é um exemplo disso acontecendo e é por isso que conseguimos
executar uma função antes de declará-la.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;foo(); // Lorem ipsum dolor sit amet, consectetur adipiscing elit.

function foo() {
  console.log(&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit.&quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Expressas&lt;/h3&gt;
&lt;p&gt;Aqui já é mais simples. Temos alguns exemplos anteriormente parecidos com esse:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;foo(); // TypeError: foo is not a function.

var foo = function() {
  console.log(&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit.&quot;);
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O que fica interessante é a junção das duas formas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;bar(); // TypeError: bar is not a function.

var bar = function foo() {
  console.log(&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit.&quot;);
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aqui acontece como nas variáveis, lembra? A declaração da variável &lt;code&gt;var bar&lt;/code&gt; foi
movida para o topo (&lt;em&gt;hoisted&lt;/em&gt;) mas sua atribuição, não. Consequentemente, o
interpretador lança um &lt;code&gt;TypeError&lt;/code&gt;, já que ele enxerga &lt;code&gt;bar&lt;/code&gt; como uma variável e
não uma função.&lt;/p&gt;
&lt;h2&gt;Ordem&lt;/h2&gt;
&lt;p&gt;Temos sempre que lembrar que tudo em JavaScript tem uma ordem:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Atribuição de valores a variáveis&lt;/li&gt;
&lt;li&gt;Declaração de função&lt;/li&gt;
&lt;li&gt;Declaração de variáveis.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Disso, tiramos isso:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A declaração de funções são &lt;em&gt;hoisted&lt;/em&gt; acima da declaração de variáveis mas não
acima da atribuição de valores às variáveis.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Quê!?&lt;/p&gt;
&lt;p&gt;Acho que com exemplos fica mais fácil.&lt;/p&gt;
&lt;h3&gt;Atribuição de variáveis acima de declaração de função&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var double = 20;

function double(value) {
  return value * 2;
}

console.log(typeof double); // number
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Declaração de função acima de atribuição de variáveis&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var double;

function double(value) {
  return value * 2;
}

console.log(typeof double); // function
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aqui vale até um exercício: mesmo trocando a posição das declarações, o
interpretador JavaScript vai considerar &lt;code&gt;double&lt;/code&gt; como &lt;code&gt;function&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Classes&lt;/h2&gt;
&lt;p&gt;Classe também é algo novo e foi introduzido junto com &lt;code&gt;let&lt;/code&gt; e &lt;code&gt;const&lt;/code&gt;,
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;no ES6&lt;/a&gt;.
Assim como funções, temos duas classificações para classes: &lt;strong&gt;declaradas&lt;/strong&gt; ou
&lt;strong&gt;expressas&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Declaradas&lt;/h3&gt;
&lt;p&gt;Bem parecido com função, classes declaradas também são &lt;em&gt;hoisted&lt;/em&gt;. Porém, elas
não são inicializadas até sua validação, o que quer dizer, em outras palavras,
que você tem que declarar uma classe antes de usá-la.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var point = new Point();
point.x = 10;
point.y = 5;

console.log(point); // ReferenceError: Point is not defined

class Point {
  constructor(x, y) {
    this.x = x;
    this.y = y;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veja que interessante: temos &lt;code&gt;ReferenceError&lt;/code&gt; ao invés de &lt;code&gt;undefined&lt;/code&gt;. O
evidencia que a classe declarada é &lt;em&gt;hoisted&lt;/em&gt;. Além disso, vou deixar para vocês
a tarefa de ver o que o &lt;a href=&quot;http://jshint.com/&quot;&gt;jshint&lt;/a&gt; fala sobre esse código.&lt;/p&gt;
&lt;p&gt;Então, declarando a classe antes, temos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Point {
  constructor(x, y) {
    this.x = x;
    this.y = y;
  }
}

var point = new Point();
point.x = 10;
point.y = 5;

console.log(point); // {x: 10, y: 5}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Expressas&lt;/h3&gt;
&lt;p&gt;Aqui também é como nas funções e já vou direto para os exemplos que acho que
fica melhor. Primeiramente, criando uma classe sem um nome (atribuindo direto a
uma variável):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var point = new Point();
point.x = 10;
point.y = 5;

console.log(point); // TypeError: Point is not a constructor

var Point = class {
  constructor(x, y) {
    this.x = x;
    this.y = y;
  }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O mesmo código mas com o nome na classe:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var point = new Point();
point.x = 10;
point.y = 5;

console.log(point); // TypeError: Point is not a constructor

var Point = class Point {
  constructor(x, y) {
    this.x = x;
    this.y = y;
  }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A forma correta de implementar isso é:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var Point = class Point {
  constructor(x, y) {
    this.x = x;
    this.y = y;
  }
};

var point = new Point();
point.x = 10;
point.y = 5;

console.log(point); // {x: 10, y: 5}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Concluindo&lt;/h2&gt;
&lt;p&gt;Alguns pontos importantes a serem lembrados:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;var&lt;/code&gt;: se você usar variáveis sem tê-las declarado, elas receberão &lt;code&gt;undefined&lt;/code&gt;
assim que forem &lt;strong&gt;hoisted&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;let&lt;/code&gt; e &lt;code&gt;const&lt;/code&gt;: usar variáveis não declaradas fará com que seja lançada uma
exceção do tipo &lt;code&gt;ReferenceError&lt;/code&gt;, pois você
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError&quot;&gt;estará tentando referenciar uma variável não existente&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;E, para não dizer que não falei&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Devemos ter o hábito de declarar e inicializar variáveis antes de usá-las.&lt;/li&gt;
&lt;li&gt;Colocar &lt;code&gt;&apos;use strict&apos;&lt;/code&gt; meio que ajuda nessa tarefa.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Espero que esse post tenha ajudado você a entender um pouco mais desse conceito
de &lt;strong&gt;hoisting&lt;/strong&gt;. Eu gostei bastante de escrever sobre isso e se você tiver
gostado, deixa um recado ae nos comentários.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Crie um videogame com Raspberry Pi]]></title><description><![CDATA[Fazer um console que emule vários outros consoles é muito fácil. O  segredo está em utilizar um Raspberry Pi e ler esse post!]]></description><link>https://ggdaltoso.dev/posts/crie-um-videogame-com-raspberry-pi/</link><guid isPermaLink="false">https://ggdaltoso.dev/posts/crie-um-videogame-com-raspberry-pi/</guid><pubDate>Tue, 30 Aug 2016 01:36:36 GMT</pubDate><content:encoded>&lt;p&gt;Que a cada dia que passa os jogos ficam cada vez &lt;del&gt;melhores&lt;/del&gt; mais bonitos, isso
ninguém pode discordar. Mas também não podemos esquecer dos grandes clássicos de
antigamente.&lt;/p&gt;
&lt;p&gt;Você consegue fazer as contas de quantas horas já gastou com Zelda? Donkey Kong?
Street Fighter? Crash? Metroid? Se for colocar a saga do Mário então, nem se
fala...&lt;/p&gt;
&lt;p&gt;O que me motivou nesse projeto foi o contato com Raspberry Pi e o quão fácil foi
configurá-lo e fazer dele uma central de emulação completa, com vários consoles
disponíveis.&lt;/p&gt;
&lt;p&gt;Estou escrevendo esse post porque várias pessoas me pediram para dar mais
detalhes de como fiz meu &quot;videogame&quot;. Haha&lt;/p&gt;
&lt;p&gt;Então, vamos lá!!&lt;/p&gt;
&lt;h3&gt;Resultado&lt;/h3&gt;
&lt;p&gt;O que seremos capaz de fazer, se seguirmos esse post passo-a-passo, é o
seguinte:&lt;/p&gt;
&lt;div class=&quot;gatsby-resp-iframe-wrapper&quot; style=&quot;padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; margin-bottom: 1.0725rem&quot; &gt; &lt;iframe src=&quot;https://www.youtube.com/embed/q5UYxuzKEec&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot; style=&quot; position: absolute; top: 0; left: 0; width: 100%; height: 100%; &quot;&gt;&lt;/iframe&gt; &lt;/div&gt;
&lt;h3&gt;Primeiros passos&lt;/h3&gt;
&lt;p&gt;O que precisamos?&lt;/p&gt;
&lt;p&gt;Ao contrário dos consoles convencionais, nosso videogame será montado peça por
peça, até que vire um único acessório. Existem kits completos na internet mas eu
preferi comprar um por um. A lista que necessitamos não é tão grande e nem tão
cara:&lt;/p&gt;
&lt;p&gt;
  &lt;table style=&quot;width: 80%; margin: auto&quot;&gt;
    &lt;thead&gt;
      &lt;tr &gt;&lt;th&gt;Componente&lt;/th&gt; &lt;th style=&quot;text-align: right&quot;&gt;Preço&lt;/th&gt;&lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tfoot&gt;
      &lt;tr&gt;
        &lt;td&gt;Total&lt;/td&gt;
        &lt;td style=&quot;text-align: right&quot; &gt;&lt;strong&gt;456,98&lt;/strong&gt;&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tfoot&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;Raspberry Pi 3&lt;/td&gt;
        &lt;td style=&quot;text-align: right&quot;&gt; 279,79 &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Fonte de 5V e 2.2A&lt;/td&gt;
        &lt;td style=&quot;text-align: right&quot;&gt; 34,80 &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Cartão Micro SD 64 Gb&lt;/td&gt;
        &lt;td style=&quot;text-align: right&quot;&gt; 92,39 &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Controle Dualshock (2x) &lt;/td&gt;
        &lt;td style=&quot;text-align: right&quot;&gt; 50,00 &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Cabo HDMI &lt;/td&gt;
        &lt;td style=&quot;text-align: right&quot;&gt; 0,00 &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Teclado USB &lt;/td&gt;
        &lt;td style=&quot;text-align: right&quot;&gt; 0,00 &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/p&gt;
&lt;p&gt;Note que escolhi o Raspberry Pi 3 por ser o mais novo e com melhores
configurações, mas não há nada que o impeça de seguir com uma versão anterior.
Os valores do Cabo HDMI e do teclado estão zerados pois eu já tinha eles e não
precisei comprá-los.&lt;/p&gt;
&lt;p&gt;Vamos utilizar o &lt;a href=&quot;https://www.recalbox.com/&quot;&gt;Recalbox&lt;/a&gt; como nossa plataforma.
Ele é open-source e de simples configuração. Para os mais aventureiros existem
outras opções como o &lt;a href=&quot;https://retropie.org.uk/&quot;&gt;RetroPie&lt;/a&gt; e o
&lt;a href=&quot;http://www.lakka.tv/&quot;&gt;Lakka&lt;/a&gt;, por exemplo.&lt;/p&gt;
&lt;h3&gt;Preparando o terreno&lt;/h3&gt;
&lt;p&gt;Com todas as peças em mãos, o próximo passo é formatar o cartão micro SD para
FAT32. O Recalbox recomenda a utilização do
&lt;a href=&quot;https://www.sdcard.org/downloads/formatter_4/&quot;&gt;SD Formatter&lt;/a&gt; para Windows ou
MacOSX e &lt;a href=&quot;http://gparted.org/&quot; title=&quot;sudo apt-get install gparted&quot;&gt;gparted&lt;/a&gt; para
Linux.&lt;/p&gt;
&lt;p&gt;Enquanto faz esse processo, você pode deixar baixando o recalbox. Escolha a
última versão disponível em seu
&lt;a href=&quot;https://github.com/recalbox/recalbox-os/releases&quot;&gt;repositório do GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Com o download feito, você deve ter um arquivo chamado &lt;em&gt;recalboxOS.zip&lt;/em&gt; e um
cartão formatado. Extraia os arquivos e os copie para cartão.&lt;/p&gt;
&lt;h3&gt;1, 2, 3 testando..&lt;/h3&gt;
&lt;p&gt;Agora que você tem o &quot;HD&quot; do seu videogame, vamos encaixar as peças no seu
Raspberry.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Insira o micro SD&lt;/li&gt;
&lt;li&gt;Conecte o cabo HDMI nele e depois em um monitor/TV&lt;/li&gt;
&lt;li&gt;Plugue um teclado&lt;/li&gt;
&lt;li&gt;Ligue a fonte&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Por alguns instantes ele fará algumas configurações e logo após irá fazer um
&lt;em&gt;reboot&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Eee.... Voilá!&lt;/p&gt;
&lt;p&gt;Simples, não?&lt;/p&gt;
&lt;h3&gt;Configurando os controles&lt;/h3&gt;
&lt;p&gt;Você pode configurar vários &lt;a href=&quot;https://github.com/recalbox/recalbox-os/wiki/Compatibility-(EN)&quot;&gt;tipos de controles para o Recalbox&lt;/a&gt;. Eu preferi o clássico DualShock.&lt;/p&gt;
&lt;p&gt;Utilize o teclado para acessar as configurações. Aperte Enter para aparecer o
menu, A para selecionar e S para voltar.&lt;/p&gt;
&lt;p&gt;&lt;img 
src=&quot;/media/crie-um-videogame-com-raspberry-pi/menu.jpg&quot; 
alt=&quot;Menu principal do Recalbox&quot; 
title=&quot;Menu.png&quot;
/&gt;&lt;/p&gt;
&lt;p&gt;Essa etapa é simples: você deve apertar a tecla do controle referente à pedida
na tela, conforme a imagem&lt;/p&gt;
&lt;p&gt;&lt;img 
src=&quot;/media/crie-um-videogame-com-raspberry-pi/controller.png&quot; 
alt=&quot;Controle do PlayStation 3&quot; 
title=&quot;PS3.png&quot;
/&gt;&lt;/p&gt;
&lt;p&gt;Um detalhe importante é a última tecla pedida: a &lt;em&gt;HOTKEY&lt;/em&gt;. Através dela você
conseguirá acessar vários comandos importantes da plataforma.&lt;/p&gt;
&lt;p&gt;
  &lt;table&gt;
    &lt;thead&gt;
      &lt;tr &gt;&lt;th&gt;Comando&lt;/th&gt; &lt;th&gt;Função&lt;/th&gt;&lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;Hotkey + Y&lt;/td&gt;
        &lt;td&gt; Carrega &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Hotkey + X&lt;/td&gt;
        &lt;td&gt; Salva &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Hotkey + &amp;uarr;&lt;/td&gt;
        &lt;td&gt; Seleciona save -1 &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Hotkey + &amp;darr;&lt;/td&gt;
        &lt;td&gt; Seleciona save +1 &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Hotkey + Start&lt;/td&gt;
        &lt;td&gt; Volta para os jogos &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Hotkey + A&lt;/td&gt;
        &lt;td&gt; Reseta o jogo &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Hotkey + B&lt;/td&gt;
        &lt;td&gt; Acessa o menu de emulação &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Hotkey + L1&lt;/td&gt;
        &lt;td&gt; &lt;i&gt;screenshot&lt;/i&gt; &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Hotkey + &amp;rarr;&lt;/td&gt;
        &lt;td&gt; Aumenta a velocidade  &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Hotkey + &amp;larr;&lt;/td&gt;
        &lt;td&gt; Diminui a velocidade  &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Hotkey + R2&lt;/td&gt;
        &lt;td&gt; Altera a filtro da imagem (próximo)  &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Hotkey + L2&lt;/td&gt;
        &lt;td&gt; Altera a filtro da imagem (anterior)  &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/p&gt;
&lt;h3&gt;Conectando&lt;/h3&gt;
&lt;p&gt;Ainda com o teclado conectado, vá nas opções e configure a conexão com a
internet (o Raspberry Pi 3 possui Wi-Fi e Bluetooth nativo)&lt;/p&gt;
&lt;p&gt;&lt;img 
src=&quot;/media/crie-um-videogame-com-raspberry-pi/networkHD.jpg&quot; 
alt=&quot;Tela de configuração de internet&quot; 
title=&quot;Network.png&quot;
/&gt;&lt;/p&gt;
&lt;p&gt;Se você tiver um cabo de rede, plugue-o e pule essa etapa. Caso prefira Wi-Fi,
como eu, preencha os campos necessários para a conexão:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WIFI SSID: Nome da sua rede&lt;/li&gt;
&lt;li&gt;WIFI KEY: Senha&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Espere até que a conexão seja feita e anote o &lt;em&gt;IP ADDRESS&lt;/em&gt;. Esse passo é muito
importante.&lt;/p&gt;
&lt;h3&gt;Inserindo Jogos&lt;/h3&gt;
&lt;p&gt;Você pode fazer essa parte de algumas formas, basta ter um computador na mesma
rede.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Acessando diretamente o cartão SD&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pelo o executar ou pelo explorer, digite o caminho &lt;code&gt;\\recalbox&lt;/code&gt; e aperte enter.&lt;/p&gt;
&lt;p&gt;&lt;img 
src=&quot;/media/crie-um-videogame-com-raspberry-pi/executar.png&quot; 
alt=&quot;Diretório do Recalbox&quot; 
title=&quot;\\recalbox.png&quot;
/&gt;&lt;/p&gt;
&lt;p&gt;Navegue até o caminho &lt;code&gt;\\recalbox\share\roms&lt;/code&gt; e tenha acesso à todas as pastas.
Agora é só copiar e colar a &lt;em&gt;rom&lt;/em&gt; em seu respectivo diretório.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Via Browser&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Lembra do &lt;em&gt;IP ADDRESS&lt;/em&gt;? Digite-o em seu browser de preferência. É possível
acessar várias configurações a partir da interface que irá aparecer: monitorar a
temperatura, adicionar/remover bios, ler a documentação e inclusive adicionar e
remover &lt;em&gt;roms&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img 
src=&quot;/media/crie-um-videogame-com-raspberry-pi/interface.png&quot; 
alt=&quot;Interface do Recalbox acessado no browser&quot; 
title=&quot;browser.png&quot;
/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pegando imagens&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Depois de ter adicionado os jogos você pode colocar imagens nas roms. Para isso,
basta voltar ao menu principal e escolher a opção &lt;em&gt;SCRAPER&lt;/em&gt;. Siga as instruções
pedidas e depois veja como ficaram seus jogos (esse passo pode demorar).&lt;/p&gt;
&lt;p&gt;&lt;img 
src=&quot;/media/crie-um-videogame-com-raspberry-pi/scrapper.png&quot; 
alt=&quot;Imagem de um jogo e suas informações&quot; 
title=&quot;Scraper.png&quot;
/&gt;&lt;/p&gt;
&lt;h3&gt;Case&lt;/h3&gt;
&lt;p&gt;Seu videogame está praticamente pronto mas para não ligar uma placa na TV
diretamente, eu comprei um case para o Raspberry. Como ele ainda não chegou
(comprei da China), fiz um temporário de papelão, seguindo um template que
&lt;a href=&quot;http://sixes.net/rdcHQ/mosh/raspberry.pi.b.plus.pdf&quot;&gt;achei na internet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img 
src=&quot;/media/crie-um-videogame-com-raspberry-pi/case.png&quot; 
alt=&quot;Capa para seu videogame&quot; 
title=&quot;Capinha.png&quot;
/&gt;&lt;/p&gt;
&lt;p&gt;Ele não ficou tão bonito mas, como disse, é provisório até o case chegar.&lt;/p&gt;
&lt;h3&gt;Próximos passos&lt;/h3&gt;
&lt;p&gt;Com a chegada do case, pretendo colocar um botão de ligar e desligar, reset
(talvez) e um LED indicando se está ligado ou não.&lt;/p&gt;
&lt;p&gt;E é isso!&lt;/p&gt;
&lt;p&gt;Espero que gostem e compartilhem fotos do videogame de vocês, caso o tenham
feito. O meu já está compartilhado!&lt;/p&gt;
&lt;p&gt;Vlw! ;)&lt;/p&gt;</content:encoded></item></channel></rss>